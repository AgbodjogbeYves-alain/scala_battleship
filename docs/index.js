Index.PACKAGES = {"battleship" : [{"name" : "battleship.Battleship", "shortDescription" : "", "object" : "battleship\/Battleship$.html", "members_object" : [{"label" : "NinetyNinetyGames", "tail" : "(gameState: GameState, centaine: Int, myResult: List[Array[String]]): (GameState, List[Array[String]])", "member" : "battleship.Battleship.NinetyNinetyGames", "link" : "battleship\/Battleship$.html#NinetyNinetyGames(gameState:battleship.GameState,centaine:Int,myResult:List[Array[String]]):(battleship.GameState,List[Array[String]])", "kind" : "def"}, {"label" : "changeIAS", "tail" : "(): Unit", "member" : "battleship.Battleship.changeIAS", "link" : "battleship\/Battleship$.html#changeIAS():Unit", "kind" : "def"}, {"label" : "selectMode", "tail" : "(): Unit", "member" : "battleship.Battleship.selectMode", "link" : "battleship\/Battleship$.html#selectMode():Unit", "kind" : "def"}, {"label" : "mainLoopAIVSAI", "tail" : "(gameState: GameState): GameState", "member" : "battleship.Battleship.mainLoopAIVSAI", "link" : "battleship\/Battleship$.html#mainLoopAIVSAI(gameState:battleship.GameState):battleship.GameState", "kind" : "def"}, {"label" : "mainLoop", "tail" : "(gameState: GameState): Unit", "member" : "battleship.Battleship.mainLoop", "link" : "battleship\/Battleship$.html#mainLoop(gameState:battleship.GameState):Unit", "kind" : "def"}, {"label" : "randomY", "tail" : ": Random.type", "member" : "battleship.Battleship.randomY", "link" : "battleship\/Battleship$.html#randomY:scala.util.Random.type", "kind" : "val"}, {"label" : "randomX", "tail" : ": Random.type", "member" : "battleship.Battleship.randomX", "link" : "battleship\/Battleship$.html#randomX:scala.util.Random.type", "kind" : "val"}, {"label" : "randomDir", "tail" : ": Random.type", "member" : "battleship.Battleship.randomDir", "link" : "battleship\/Battleship$.html#randomDir:scala.util.Random.type", "kind" : "val"}, {"label" : "boatName", "tail" : ": Array[String]", "member" : "battleship.Battleship.boatName", "link" : "battleship\/Battleship$.html#boatName:Array[String]", "kind" : "val"}, {"label" : "boatSize", "tail" : ": Array[Int]", "member" : "battleship.Battleship.boatSize", "link" : "battleship\/Battleship$.html#boatSize:Array[Int]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "battleship\/Battleship$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "battleship\/Battleship$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "battleship\/Battleship$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "battleship\/Battleship$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/Battleship$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/Battleship$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/Battleship$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/Battleship$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/Battleship$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/Battleship$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/Battleship$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Battleship$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Battleship$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Battleship$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/Battleship$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/Battleship$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "battleship\/Battleship$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/Battleship$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "battleship\/Battleship$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "battleship\/Battleship$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/Battleship$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/Battleship$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/Battleship$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "battleship.BattleShipUtil", "shortDescription" : "", "object" : "battleship\/BattleShipUtil$.html", "members_object" : [{"label" : "makeCSV", "tail" : "(myScores: List[Array[String]]): Unit", "member" : "battleship.BattleShipUtil.makeCSV", "link" : "battleship\/BattleShipUtil$.html#makeCSV(myScores:List[Array[String]]):Unit", "kind" : "def"}, {"label" : "showMyShoots", "tail" : "(player: Player): Unit", "member" : "battleship.BattleShipUtil.showMyShoots", "link" : "battleship\/BattleShipUtil$.html#showMyShoots(player:battleship.Player):Unit", "kind" : "def"}, {"label" : "choice", "tail" : "(gameState: GameState): Unit", "member" : "battleship.BattleShipUtil.choice", "link" : "battleship\/BattleShipUtil$.html#choice(gameState:battleship.GameState):Unit", "kind" : "def"}, {"label" : "affichage", "tail" : "(player: Player): Unit", "member" : "battleship.BattleShipUtil.affichage", "link" : "battleship\/BattleShipUtil$.html#affichage(player:battleship.Player):Unit", "kind" : "def"}, {"label" : "enterPosition", "tail" : "(player: Player, size: Int, boatName: String): Option[Player]", "member" : "battleship.BattleShipUtil.enterPosition", "link" : "battleship\/BattleShipUtil$.html#enterPosition(player:battleship.Player,size:Int,boatName:String):Option[battleship.Player]", "kind" : "def"}, {"label" : "createFleet", "tail" : "(name: String, nbShips: Int, playerType: Boolean): Player", "member" : "battleship.BattleShipUtil.createFleet", "link" : "battleship\/BattleShipUtil$.html#createFleet(name:String,nbShips:Int,playerType:Boolean):battleship.Player", "kind" : "def"}, {"label" : "getUserStringInput", "tail" : "(): String", "member" : "battleship.BattleShipUtil.getUserStringInput", "link" : "battleship\/BattleShipUtil$.html#getUserStringInput():String", "kind" : "def"}, {"label" : "getUserIntInput", "tail" : "(): Option[Int]", "member" : "battleship.BattleShipUtil.getUserIntInput", "link" : "battleship\/BattleShipUtil$.html#getUserIntInput():Option[Int]", "kind" : "def"}, {"label" : "showQuestion", "tail" : "(message: String): Unit", "member" : "battleship.BattleShipUtil.showQuestion", "link" : "battleship\/BattleShipUtil$.html#showQuestion(message:String):Unit", "kind" : "def"}, {"label" : "show", "tail" : "(): Unit", "member" : "battleship.BattleShipUtil.show", "link" : "battleship\/BattleShipUtil$.html#show():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/BattleShipUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/BattleShipUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/BattleShipUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/BattleShipUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/BattleShipUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/BattleShipUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/BattleShipUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BattleShipUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BattleShipUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BattleShipUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/BattleShipUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/BattleShipUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "battleship\/BattleShipUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/BattleShipUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "battleship\/BattleShipUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "battleship\/BattleShipUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/BattleShipUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/BattleShipUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/BattleShipUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "battleship.BBoard", "shortDescription" : "", "members_case class" : [{"label" : "noShipLeft", "tail" : "(): Option[Boolean]", "member" : "battleship.BBoard.noShipLeft", "link" : "battleship\/BBoard.html#noShipLeft():Option[Boolean]", "kind" : "def"}, {"label" : "addNewShip", "tail" : "(ship: Ship): BBoard", "member" : "battleship.BBoard.addNewShip", "link" : "battleship\/BBoard.html#addNewShip(ship:battleship.Ship):battleship.BBoard", "kind" : "def"}, {"label" : "checkIfPositionAlreadyExist", "tail" : "(position: Position): Option[Int]", "member" : "battleship.BBoard.checkIfPositionAlreadyExist", "link" : "battleship\/BBoard.html#checkIfPositionAlreadyExist(position:battleship.Position):Option[Int]", "kind" : "def"}, {"label" : "myNewShoot", "tail" : "(position: Position): Option[BBoard]", "member" : "battleship.BBoard.myNewShoot", "link" : "battleship\/BBoard.html#myNewShoot(position:battleship.Position):Option[battleship.BBoard]", "kind" : "def"}, {"label" : "aNewOpponentShoot", "tail" : "(position: Position): Option[BBoard]", "member" : "battleship.BBoard.aNewOpponentShoot", "link" : "battleship\/BBoard.html#aNewOpponentShoot(position:battleship.Position):Option[battleship.BBoard]", "kind" : "def"}, {"label" : "isItTouched", "tail" : "(position: Position): Option[Int]", "member" : "battleship.BBoard.isItTouched", "link" : "battleship\/BBoard.html#isItTouched(position:battleship.Position):Option[Int]", "kind" : "def"}, {"member" : "battleship.BBoard#<init>", "error" : "unsupported entity"}, {"label" : "myShoots", "tail" : ": List[Position]", "member" : "battleship.BBoard.myShoots", "link" : "battleship\/BBoard.html#myShoots:List[battleship.Position]", "kind" : "val"}, {"label" : "opponentShoots", "tail" : ": List[Position]", "member" : "battleship.BBoard.opponentShoots", "link" : "battleship\/BBoard.html#opponentShoots:List[battleship.Position]", "kind" : "val"}, {"label" : "shipList", "tail" : ": List[Ship]", "member" : "battleship.BBoard.shipList", "link" : "battleship\/BBoard.html#shipList:List[battleship.Ship]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/BBoard.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/BBoard.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/BBoard.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/BBoard.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/BBoard.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/BBoard.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/BBoard.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BBoard.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BBoard.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BBoard.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/BBoard.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/BBoard.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/BBoard.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/BBoard.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/BBoard.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/BBoard.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "battleship\/BBoard.html", "kind" : "case class"}, {"name" : "battleship.BBoardSpec", "shortDescription" : "", "members_class" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.Matchers.RegexWrapper", "link" : "battleship\/BBoardSpec.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.StringShouldWrapper", "link" : "battleship\/BBoardSpec.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.AnyShouldWrapper", "link" : "battleship\/BBoardSpec.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "battleship\/BBoardSpec.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForCollectedString", "link" : "battleship\/BBoardSpec.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForCollectedString", "link" : "battleship\/BBoardSpec.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForCollectedString", "link" : "battleship\/BBoardSpec.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "battleship\/BBoardSpec.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfCollectedAny", "link" : "battleship\/BBoardSpec.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedArray", "link" : "battleship\/BBoardSpec.html#ResultOfBeWordForCollectedArray[T<:<?>]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedAny", "link" : "battleship\/BBoardSpec.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfContainWordForCollectedAny", "link" : "battleship\/BBoardSpec.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfNotWordForCollectedAny", "link" : "battleship\/BBoardSpec.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForExtent", "link" : "battleship\/BBoardSpec.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.Matchers.TheSameInstanceAsPhrase", "link" : "battleship\/BBoardSpec.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.Matchers.AnWord", "link" : "battleship\/BBoardSpec.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.Matchers.AWord", "link" : "battleship\/BBoardSpec.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.Matchers.ValueWord", "link" : "battleship\/BBoardSpec.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.Matchers.KeyWord", "link" : "battleship\/BBoardSpec.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForString", "link" : "battleship\/BBoardSpec.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForString", "link" : "battleship\/BBoardSpec.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForString", "link" : "battleship\/BBoardSpec.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForString", "link" : "battleship\/BBoardSpec.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.Matchers.RegexWord", "link" : "battleship\/BBoardSpec.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForAny", "link" : "battleship\/BBoardSpec.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.Matchers.HavePropertyMatcherGenerator", "link" : "battleship\/BBoardSpec.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "battleship\/BBoardSpec.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "battleship\/BBoardSpec.html#DeterminedByEquivalence[T<:<?>]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "battleship\/BBoardSpec.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "battleship\/BBoardSpec.html#DecidedByEquality[A<:<?>]extendsEquality[A]", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "battleship\/BBoardSpec.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "battleship\/BBoardSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/BBoardSpec.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "battleship\/BBoardSpec.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "battleship\/BBoardSpec.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "battleship\/BBoardSpec.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "battleship\/BBoardSpec.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "battleship\/BBoardSpec.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "battleship\/BBoardSpec.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "battleship\/BBoardSpec.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "battleship\/BBoardSpec.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "battleship\/BBoardSpec.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "battleship\/BBoardSpec.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "battleship\/BBoardSpec.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "battleship\/BBoardSpec.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "battleship\/BBoardSpec.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "battleship\/BBoardSpec.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "battleship\/BBoardSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "battleship\/BBoardSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "battleship\/BBoardSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "battleship\/BBoardSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "myBoardWithOpponentNewShoot", "tail" : ": BBoard", "member" : "battleship.BBoardSpec.myBoardWithOpponentNewShoot", "link" : "battleship\/BBoardSpec.html#myBoardWithOpponentNewShoot:battleship.BBoard", "kind" : "val"}, {"label" : "myBoardWithMyNewShoot", "tail" : ": BBoard", "member" : "battleship.BBoardSpec.myBoardWithMyNewShoot", "link" : "battleship\/BBoardSpec.html#myBoardWithMyNewShoot:battleship.BBoard", "kind" : "val"}, {"label" : "myBoardModified", "tail" : ": BBoard", "member" : "battleship.BBoardSpec.myBoardModified", "link" : "battleship\/BBoardSpec.html#myBoardModified:battleship.BBoard", "kind" : "val"}, {"label" : "myBBoard", "tail" : ": BBoard", "member" : "battleship.BBoardSpec.myBBoard", "link" : "battleship\/BBoardSpec.html#myBBoard:battleship.BBoard", "kind" : "val"}, {"label" : "shootedShip", "tail" : ": Ship", "member" : "battleship.BBoardSpec.shootedShip", "link" : "battleship\/BBoardSpec.html#shootedShip:battleship.Ship", "kind" : "val"}, {"label" : "shipD", "tail" : ": Ship", "member" : "battleship.BBoardSpec.shipD", "link" : "battleship\/BBoardSpec.html#shipD:battleship.Ship", "kind" : "val"}, {"label" : "positionDList", "tail" : ": List[Position]", "member" : "battleship.BBoardSpec.positionDList", "link" : "battleship\/BBoardSpec.html#positionDList:List[battleship.Position]", "kind" : "val"}, {"label" : "positionD5", "tail" : ": Position", "member" : "battleship.BBoardSpec.positionD5", "link" : "battleship\/BBoardSpec.html#positionD5:battleship.Position", "kind" : "val"}, {"label" : "positionD4", "tail" : ": Position", "member" : "battleship.BBoardSpec.positionD4", "link" : "battleship\/BBoardSpec.html#positionD4:battleship.Position", "kind" : "val"}, {"label" : "positionD3", "tail" : ": Position", "member" : "battleship.BBoardSpec.positionD3", "link" : "battleship\/BBoardSpec.html#positionD3:battleship.Position", "kind" : "val"}, {"label" : "positionD2", "tail" : ": Position", "member" : "battleship.BBoardSpec.positionD2", "link" : "battleship\/BBoardSpec.html#positionD2:battleship.Position", "kind" : "val"}, {"label" : "positionD1", "tail" : ": Position", "member" : "battleship.BBoardSpec.positionD1", "link" : "battleship\/BBoardSpec.html#positionD1:battleship.Position", "kind" : "val"}, {"label" : "shipDestroy", "tail" : ": Ship", "member" : "battleship.BBoardSpec.shipDestroy", "link" : "battleship\/BBoardSpec.html#shipDestroy:battleship.Ship", "kind" : "val"}, {"label" : "newListWithDestroyPosition", "tail" : ": List[Position]", "member" : "battleship.BBoardSpec.newListWithDestroyPosition", "link" : "battleship\/BBoardSpec.html#newListWithDestroyPosition:List[battleship.Position]", "kind" : "val"}, {"label" : "ship", "tail" : ": Ship", "member" : "battleship.BBoardSpec.ship", "link" : "battleship\/BBoardSpec.html#ship:battleship.Ship", "kind" : "val"}, {"label" : "positionList", "tail" : ": List[Position]", "member" : "battleship.BBoardSpec.positionList", "link" : "battleship\/BBoardSpec.html#positionList:List[battleship.Position]", "kind" : "val"}, {"label" : "position6", "tail" : ": Position", "member" : "battleship.BBoardSpec.position6", "link" : "battleship\/BBoardSpec.html#position6:battleship.Position", "kind" : "val"}, {"label" : "position5", "tail" : ": Position", "member" : "battleship.BBoardSpec.position5", "link" : "battleship\/BBoardSpec.html#position5:battleship.Position", "kind" : "val"}, {"label" : "position4", "tail" : ": Position", "member" : "battleship.BBoardSpec.position4", "link" : "battleship\/BBoardSpec.html#position4:battleship.Position", "kind" : "val"}, {"label" : "position3", "tail" : ": Position", "member" : "battleship.BBoardSpec.position3", "link" : "battleship\/BBoardSpec.html#position3:battleship.Position", "kind" : "val"}, {"label" : "position2", "tail" : ": Position", "member" : "battleship.BBoardSpec.position2", "link" : "battleship\/BBoardSpec.html#position2:battleship.Position", "kind" : "val"}, {"label" : "position1", "tail" : ": Position", "member" : "battleship.BBoardSpec.position1", "link" : "battleship\/BBoardSpec.html#position1:battleship.Position", "kind" : "val"}, {"member" : "battleship.BBoardSpec#<init>", "error" : "unsupported entity"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.Matchers.of", "link" : "battleship\/BBoardSpec.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.Matchers.convertToRegexWrapper", "link" : "battleship\/BBoardSpec.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: org.scalactic.source.Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.Matchers.convertToStringShouldWrapper", "link" : "battleship\/BBoardSpec.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: org.scalactic.source.Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.Matchers.convertToAnyShouldWrapper", "link" : "battleship\/BBoardSpec.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: org.scalactic.source.Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.Matchers.the", "link" : "battleship\/BBoardSpec.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/BBoardSpec.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/BBoardSpec.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/BBoardSpec.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/BBoardSpec.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/BBoardSpec.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/BBoardSpec.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/BBoardSpec.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/BBoardSpec.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/BBoardSpec.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/BBoardSpec.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/BBoardSpec.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/BBoardSpec.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/BBoardSpec.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/BBoardSpec.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/BBoardSpec.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/BBoardSpec.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/BBoardSpec.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/BBoardSpec.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/BBoardSpec.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/BBoardSpec.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/BBoardSpec.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/BBoardSpec.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/BBoardSpec.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.Matchers.message", "link" : "battleship\/BBoardSpec.html#message(expectedMessage:String):org.scalatest.words.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: ⇒ Any): ResultOfThrownByApplication", "member" : "org.scalatest.Matchers.thrownBy", "link" : "battleship\/BBoardSpec.html#thrownBy(fun:=>Any):org.scalatest.words.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.Matchers.atMostOneElementOf", "link" : "battleship\/BBoardSpec.html#atMostOneElementOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.Matchers.atMostOneOf", "link" : "battleship\/BBoardSpec.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.Matchers.inOrderElementsOf", "link" : "battleship\/BBoardSpec.html#inOrderElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderApplication", "member" : "org.scalatest.Matchers.inOrder", "link" : "battleship\/BBoardSpec.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.Matchers.allElementsOf", "link" : "battleship\/BBoardSpec.html#allElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAllOfApplication", "member" : "org.scalatest.Matchers.allOf", "link" : "battleship\/BBoardSpec.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.Matchers.inOrderOnly", "link" : "battleship\/BBoardSpec.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: org.scalactic.source.Position): ResultOfOnlyApplication", "member" : "org.scalatest.Matchers.only", "link" : "battleship\/BBoardSpec.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.Matchers.theSameElementsInOrderAs", "link" : "battleship\/BBoardSpec.html#theSameElementsInOrderAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.Matchers.theSameElementsAs", "link" : "battleship\/BBoardSpec.html#theSameElementsAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.Matchers.noElementsOf", "link" : "battleship\/BBoardSpec.html#noElementsOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfNoneOfApplication", "member" : "org.scalatest.Matchers.noneOf", "link" : "battleship\/BBoardSpec.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.Matchers.atLeastOneElementOf", "link" : "battleship\/BBoardSpec.html#atLeastOneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.Matchers.atLeastOneOf", "link" : "battleship\/BBoardSpec.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.Matchers.oneElementOf", "link" : "battleship\/BBoardSpec.html#oneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfOneOfApplication", "member" : "org.scalatest.Matchers.oneOf", "link" : "battleship\/BBoardSpec.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.Matchers.definedAt", "link" : "battleship\/BBoardSpec.html#definedAt[T](right:T):org.scalatest.words.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.>=", "link" : "battleship\/BBoardSpec.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.words.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.<=", "link" : "battleship\/BBoardSpec.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.words.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.Matchers.>", "link" : "battleship\/BBoardSpec.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.words.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.Matchers.<", "link" : "battleship\/BBoardSpec.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.words.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.Matchers.regex", "link" : "battleship\/BBoardSpec.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.Matchers.theSameInstanceAs", "link" : "battleship\/BBoardSpec.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/BBoardSpec.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/BBoardSpec.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.Matchers.value", "link" : "battleship\/BBoardSpec.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.Matchers.key", "link" : "battleship\/BBoardSpec.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/BBoardSpec.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/BBoardSpec.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: org.scalactic.source.Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "battleship\/BBoardSpec.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "battleship\/BBoardSpec.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "battleship\/BBoardSpec.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "battleship\/BBoardSpec.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.words.MatcherWords.equal", "link" : "battleship\/BBoardSpec.html#equal(right:Any):org.scalatest.matchers.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.words.MatcherWords.matchPattern", "link" : "battleship\/BBoardSpec.html#matchPattern:org.scalatest.words.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.words.MatcherWords.typeCheck", "link" : "battleship\/BBoardSpec.html#typeCheck:org.scalatest.words.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.words.MatcherWords.compile", "link" : "battleship\/BBoardSpec.html#compile:org.scalatest.words.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.words.MatcherWords.empty", "link" : "battleship\/BBoardSpec.html#empty:org.scalatest.words.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.words.MatcherWords.writable", "link" : "battleship\/BBoardSpec.html#writable:org.scalatest.words.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.words.MatcherWords.readable", "link" : "battleship\/BBoardSpec.html#readable:org.scalatest.words.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.words.MatcherWords.exist", "link" : "battleship\/BBoardSpec.html#exist:org.scalatest.words.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: org.scalactic.source.Position): NoExceptionWord", "member" : "org.scalatest.words.MatcherWords.noException", "link" : "battleship\/BBoardSpec.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.words.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.words.MatcherWords.defined", "link" : "battleship\/BBoardSpec.html#defined:org.scalatest.words.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.words.MatcherWords.sorted", "link" : "battleship\/BBoardSpec.html#sorted:org.scalatest.words.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.words.MatcherWords.size", "link" : "battleship\/BBoardSpec.html#size:org.scalatest.words.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.words.MatcherWords.length", "link" : "battleship\/BBoardSpec.html#length:org.scalatest.words.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.words.MatcherWords.not", "link" : "battleship\/BBoardSpec.html#not:org.scalatest.words.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.words.MatcherWords.contain", "link" : "battleship\/BBoardSpec.html#contain:org.scalatest.words.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.words.MatcherWords.be", "link" : "battleship\/BBoardSpec.html#be:org.scalatest.words.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.words.MatcherWords.have", "link" : "battleship\/BBoardSpec.html#have:org.scalatest.words.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.words.MatcherWords.include", "link" : "battleship\/BBoardSpec.html#include:org.scalatest.words.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.words.MatcherWords.endWith", "link" : "battleship\/BBoardSpec.html#endWith:org.scalatest.words.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.words.MatcherWords.startWith", "link" : "battleship\/BBoardSpec.html#startWith:org.scalatest.words.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.words.MatcherWords.fullyMatch", "link" : "battleship\/BBoardSpec.html#fullyMatch:org.scalatest.words.FullyMatchWord", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "battleship\/BBoardSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "battleship\/BBoardSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "battleship\/BBoardSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "battleship\/BBoardSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "battleship\/BBoardSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "battleship\/BBoardSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "battleship\/BBoardSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "battleship\/BBoardSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "battleship\/BBoardSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "battleship\/BBoardSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "battleship\/BBoardSpec.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "battleship\/BBoardSpec.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/BBoardSpec.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "battleship\/BBoardSpec.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "battleship\/BBoardSpec.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "battleship\/BBoardSpec.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "battleship\/BBoardSpec.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "battleship\/BBoardSpec.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "battleship\/BBoardSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "battleship\/BBoardSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "battleship\/BBoardSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "battleship\/BBoardSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "battleship\/BBoardSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "battleship\/BBoardSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: org.scalactic.source.Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "battleship\/BBoardSpec.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "battleship\/BBoardSpec.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "battleship\/BBoardSpec.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "battleship\/BBoardSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "battleship\/BBoardSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "battleship\/BBoardSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "battleship\/BBoardSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "battleship\/BBoardSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "battleship\/BBoardSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/BBoardSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/BBoardSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "battleship\/BBoardSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "battleship\/BBoardSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: org.scalactic.source.Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "battleship\/BBoardSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "battleship\/BBoardSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "battleship\/BBoardSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/BBoardSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/BBoardSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/BBoardSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/BBoardSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/BBoardSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/BBoardSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/BBoardSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/BBoardSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/BBoardSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/BBoardSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "battleship\/BBoardSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "battleship\/BBoardSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "battleship\/BBoardSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "battleship\/BBoardSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "battleship\/BBoardSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "battleship\/BBoardSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/BBoardSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/BBoardSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/BBoardSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "battleship\/BBoardSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/BBoardSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "battleship\/BBoardSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "battleship\/BBoardSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "battleship\/BBoardSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "battleship\/BBoardSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "battleship\/BBoardSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "battleship\/BBoardSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "battleship\/BBoardSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "battleship\/BBoardSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "battleship\/BBoardSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "battleship\/BBoardSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "battleship\/BBoardSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/BBoardSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/BBoardSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/BBoardSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/BBoardSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/BBoardSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/BBoardSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "battleship\/BBoardSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/BBoardSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/BBoardSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/BBoardSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/BBoardSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/BBoardSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/BBoardSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/BBoardSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BBoardSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BBoardSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/BBoardSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/BBoardSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/BBoardSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/BBoardSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "battleship\/BBoardSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "battleship\/BBoardSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/BBoardSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/BBoardSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/BBoardSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "battleship\/BBoardSpec.html", "kind" : "class"}, {"name" : "battleship.GameState", "shortDescription" : "", "members_case class" : [{"member" : "battleship.GameState#<init>", "error" : "unsupported entity"}, {"label" : "randomY", "tail" : ": Random", "member" : "battleship.GameState.randomY", "link" : "battleship\/GameState.html#randomY:scala.util.Random", "kind" : "val"}, {"label" : "randomX", "tail" : ": Random", "member" : "battleship.GameState.randomX", "link" : "battleship\/GameState.html#randomX:scala.util.Random", "kind" : "val"}, {"label" : "randomDir", "tail" : ": Random", "member" : "battleship.GameState.randomDir", "link" : "battleship\/GameState.html#randomDir:scala.util.Random", "kind" : "val"}, {"label" : "mode", "tail" : ": Int", "member" : "battleship.GameState.mode", "link" : "battleship\/GameState.html#mode:Int", "kind" : "val"}, {"label" : "beginner", "tail" : ": Player", "member" : "battleship.GameState.beginner", "link" : "battleship\/GameState.html#beginner:battleship.Player", "kind" : "val"}, {"label" : "opponent", "tail" : ": Player", "member" : "battleship.GameState.opponent", "link" : "battleship\/GameState.html#opponent:battleship.Player", "kind" : "val"}, {"label" : "player", "tail" : ": Player", "member" : "battleship.GameState.player", "link" : "battleship\/GameState.html#player:battleship.Player", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/GameState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/GameState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/GameState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/GameState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/GameState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/GameState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/GameState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/GameState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/GameState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/GameState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/GameState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/GameState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/GameState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/GameState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/GameState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/GameState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "battleship\/GameState.html", "kind" : "case class"}, {"name" : "battleship.Player", "shortDescription" : "Class Player.", "members_case class" : [{"label" : "getShootFromPlayer", "tail" : "(randX: Random, randY: Random): Option[Position]", "member" : "battleship.Player.getShootFromPlayer", "link" : "battleship\/Player.html#getShootFromPlayer(randX:scala.util.Random,randY:scala.util.Random):Option[battleship.Position]", "kind" : "def"}, {"label" : "shootPositionHard", "tail" : "(randX: Random, randY: Random): Position", "member" : "battleship.Player.shootPositionHard", "link" : "battleship\/Player.html#shootPositionHard(randX:scala.util.Random,randY:scala.util.Random):battleship.Position", "kind" : "def"}, {"label" : "shootPositionMedium", "tail" : "(randX: Random, randY: Random): Position", "member" : "battleship.Player.shootPositionMedium", "link" : "battleship\/Player.html#shootPositionMedium(randX:scala.util.Random,randY:scala.util.Random):battleship.Position", "kind" : "def"}, {"label" : "shootPositionEasy", "tail" : "(randX: Random, randY: Random): Position", "member" : "battleship.Player.shootPositionEasy", "link" : "battleship\/Player.html#shootPositionEasy(randX:scala.util.Random,randY:scala.util.Random):battleship.Position", "kind" : "def"}, {"label" : "generateRandomDirection", "tail" : "(randDir: Random): String", "member" : "battleship.Player.generateRandomDirection", "link" : "battleship\/Player.html#generateRandomDirection(randDir:scala.util.Random):String", "kind" : "def"}, {"label" : "generateRandomPosition", "tail" : "(randX: Random, randY: Random): Position", "member" : "battleship.Player.generateRandomPosition", "link" : "battleship\/Player.html#generateRandomPosition(randX:scala.util.Random,randY:scala.util.Random):battleship.Position", "kind" : "def"}, {"label" : "addOpponentsShootsGrid", "tail" : "(positionList: List[Position], grid: List[List[String]]): List[List[String]]", "member" : "battleship.Player.addOpponentsShootsGrid", "link" : "battleship\/Player.html#addOpponentsShootsGrid(positionList:List[battleship.Position],grid:List[List[String]]):List[List[String]]", "kind" : "def"}, {"label" : "createMyShootGridForShow", "tail" : "(): List[List[String]]", "member" : "battleship.Player.createMyShootGridForShow", "link" : "battleship\/Player.html#createMyShootGridForShow():List[List[String]]", "kind" : "def"}, {"label" : "defineNewGrid", "tail" : "(positionList: List[Position], grid: List[List[String]]): List[List[String]]", "member" : "battleship.Player.defineNewGrid", "link" : "battleship\/Player.html#defineNewGrid(positionList:List[battleship.Position],grid:List[List[String]]):List[List[String]]", "kind" : "def"}, {"label" : "createMyGridForShow", "tail" : "(): List[List[String]]", "member" : "battleship.Player.createMyGridForShow", "link" : "battleship\/Player.html#createMyGridForShow():List[List[String]]", "kind" : "def"}, {"label" : "stillInGame", "tail" : "(): Boolean", "member" : "battleship.Player.stillInGame", "link" : "battleship\/Player.html#stillInGame():Boolean", "kind" : "def"}, {"label" : "createShip", "tail" : "(name: String, position: Position, direction: String, size: Int): Option[Player]", "member" : "battleship.Player.createShip", "link" : "battleship\/Player.html#createShip(name:String,position:battleship.Position,direction:String,size:Int):Option[battleship.Player]", "kind" : "def"}, {"label" : "makeAShoot", "tail" : "(position: Position): Player", "member" : "battleship.Player.makeAShoot", "link" : "battleship\/Player.html#makeAShoot(position:battleship.Position):battleship.Player", "kind" : "def"}, {"label" : "receiveAShoot", "tail" : "(position: Position): Player", "member" : "battleship.Player.receiveAShoot", "link" : "battleship\/Player.html#receiveAShoot(position:battleship.Position):battleship.Player", "kind" : "def"}, {"member" : "battleship.Player#<init>", "error" : "unsupported entity"}, {"label" : "score", "tail" : ": Int", "member" : "battleship.Player.score", "link" : "battleship\/Player.html#score:Int", "kind" : "val"}, {"label" : "isHuman", "tail" : ": Boolean", "member" : "battleship.Player.isHuman", "link" : "battleship\/Player.html#isHuman:Boolean", "kind" : "val"}, {"label" : "myBoard", "tail" : ": BBoard", "member" : "battleship.Player.myBoard", "link" : "battleship\/Player.html#myBoard:battleship.BBoard", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "battleship.Player.name", "link" : "battleship\/Player.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/Player.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/Player.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/Player.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/Player.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/Player.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/Player.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/Player.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Player.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Player.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Player.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/Player.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/Player.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/Player.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/Player.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/Player.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/Player.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "battleship\/Player.html", "kind" : "case class"}, {"name" : "battleship.PlayerSpec", "shortDescription" : "", "members_class" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.Matchers.RegexWrapper", "link" : "battleship\/PlayerSpec.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.StringShouldWrapper", "link" : "battleship\/PlayerSpec.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.AnyShouldWrapper", "link" : "battleship\/PlayerSpec.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "battleship\/PlayerSpec.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForCollectedString", "link" : "battleship\/PlayerSpec.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForCollectedString", "link" : "battleship\/PlayerSpec.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForCollectedString", "link" : "battleship\/PlayerSpec.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "battleship\/PlayerSpec.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfCollectedAny", "link" : "battleship\/PlayerSpec.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedArray", "link" : "battleship\/PlayerSpec.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedAny", "link" : "battleship\/PlayerSpec.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfContainWordForCollectedAny", "link" : "battleship\/PlayerSpec.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfNotWordForCollectedAny", "link" : "battleship\/PlayerSpec.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForExtent", "link" : "battleship\/PlayerSpec.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.Matchers.TheSameInstanceAsPhrase", "link" : "battleship\/PlayerSpec.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.Matchers.AnWord", "link" : "battleship\/PlayerSpec.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.Matchers.AWord", "link" : "battleship\/PlayerSpec.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.Matchers.ValueWord", "link" : "battleship\/PlayerSpec.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.Matchers.KeyWord", "link" : "battleship\/PlayerSpec.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForString", "link" : "battleship\/PlayerSpec.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForString", "link" : "battleship\/PlayerSpec.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForString", "link" : "battleship\/PlayerSpec.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForString", "link" : "battleship\/PlayerSpec.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.Matchers.RegexWord", "link" : "battleship\/PlayerSpec.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForAny", "link" : "battleship\/PlayerSpec.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.Matchers.HavePropertyMatcherGenerator", "link" : "battleship\/PlayerSpec.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "battleship\/PlayerSpec.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "battleship\/PlayerSpec.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "battleship\/PlayerSpec.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "battleship\/PlayerSpec.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "battleship\/PlayerSpec.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "battleship\/PlayerSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/PlayerSpec.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "battleship\/PlayerSpec.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "battleship\/PlayerSpec.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "battleship\/PlayerSpec.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "battleship\/PlayerSpec.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "battleship\/PlayerSpec.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "battleship\/PlayerSpec.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "battleship\/PlayerSpec.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "battleship\/PlayerSpec.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "battleship\/PlayerSpec.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "battleship\/PlayerSpec.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "battleship\/PlayerSpec.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "battleship\/PlayerSpec.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "battleship\/PlayerSpec.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "battleship\/PlayerSpec.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "battleship\/PlayerSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "battleship\/PlayerSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "battleship\/PlayerSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "battleship\/PlayerSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "newPlayerV2", "tail" : ": Player", "member" : "battleship.PlayerSpec.newPlayerV2", "link" : "battleship\/PlayerSpec.html#newPlayerV2:battleship.Player", "kind" : "val"}, {"label" : "newMyBoardV2", "tail" : ": BBoard", "member" : "battleship.PlayerSpec.newMyBoardV2", "link" : "battleship\/PlayerSpec.html#newMyBoardV2:battleship.BBoard", "kind" : "val"}, {"label" : "newShipV2", "tail" : ": Ship", "member" : "battleship.PlayerSpec.newShipV2", "link" : "battleship\/PlayerSpec.html#newShipV2:battleship.Ship", "kind" : "val"}, {"label" : "newPlayerV", "tail" : ": Player", "member" : "battleship.PlayerSpec.newPlayerV", "link" : "battleship\/PlayerSpec.html#newPlayerV:battleship.Player", "kind" : "val"}, {"label" : "newMyBoardV", "tail" : ": BBoard", "member" : "battleship.PlayerSpec.newMyBoardV", "link" : "battleship\/PlayerSpec.html#newMyBoardV:battleship.BBoard", "kind" : "val"}, {"label" : "newShipV", "tail" : ": Ship", "member" : "battleship.PlayerSpec.newShipV", "link" : "battleship\/PlayerSpec.html#newShipV:battleship.Ship", "kind" : "val"}, {"label" : "newPlayerH", "tail" : ": Player", "member" : "battleship.PlayerSpec.newPlayerH", "link" : "battleship\/PlayerSpec.html#newPlayerH:battleship.Player", "kind" : "val"}, {"label" : "newMyBoardH", "tail" : ": BBoard", "member" : "battleship.PlayerSpec.newMyBoardH", "link" : "battleship\/PlayerSpec.html#newMyBoardH:battleship.BBoard", "kind" : "val"}, {"label" : "newShipH", "tail" : ": Ship", "member" : "battleship.PlayerSpec.newShipH", "link" : "battleship\/PlayerSpec.html#newShipH:battleship.Ship", "kind" : "val"}, {"label" : "newPos2V2", "tail" : ": Position", "member" : "battleship.PlayerSpec.newPos2V2", "link" : "battleship\/PlayerSpec.html#newPos2V2:battleship.Position", "kind" : "val"}, {"label" : "newPos1V2", "tail" : ": Position", "member" : "battleship.PlayerSpec.newPos1V2", "link" : "battleship\/PlayerSpec.html#newPos1V2:battleship.Position", "kind" : "val"}, {"label" : "newPos2V", "tail" : ": Position", "member" : "battleship.PlayerSpec.newPos2V", "link" : "battleship\/PlayerSpec.html#newPos2V:battleship.Position", "kind" : "val"}, {"label" : "newPos1V", "tail" : ": Position", "member" : "battleship.PlayerSpec.newPos1V", "link" : "battleship\/PlayerSpec.html#newPos1V:battleship.Position", "kind" : "val"}, {"label" : "newPos2H", "tail" : ": Position", "member" : "battleship.PlayerSpec.newPos2H", "link" : "battleship\/PlayerSpec.html#newPos2H:battleship.Position", "kind" : "val"}, {"label" : "newPos1H", "tail" : ": Position", "member" : "battleship.PlayerSpec.newPos1H", "link" : "battleship\/PlayerSpec.html#newPos1H:battleship.Position", "kind" : "val"}, {"label" : "player", "tail" : ": Player", "member" : "battleship.PlayerSpec.player", "link" : "battleship\/PlayerSpec.html#player:battleship.Player", "kind" : "val"}, {"label" : "myBBoard", "tail" : ": BBoard", "member" : "battleship.PlayerSpec.myBBoard", "link" : "battleship\/PlayerSpec.html#myBBoard:battleship.BBoard", "kind" : "val"}, {"label" : "myShoots", "tail" : ": List[Position]", "member" : "battleship.PlayerSpec.myShoots", "link" : "battleship\/PlayerSpec.html#myShoots:List[battleship.Position]", "kind" : "val"}, {"label" : "positionD5", "tail" : ": Position", "member" : "battleship.PlayerSpec.positionD5", "link" : "battleship\/PlayerSpec.html#positionD5:battleship.Position", "kind" : "val"}, {"label" : "positionD4", "tail" : ": Position", "member" : "battleship.PlayerSpec.positionD4", "link" : "battleship\/PlayerSpec.html#positionD4:battleship.Position", "kind" : "val"}, {"label" : "positionD3", "tail" : ": Position", "member" : "battleship.PlayerSpec.positionD3", "link" : "battleship\/PlayerSpec.html#positionD3:battleship.Position", "kind" : "val"}, {"label" : "positionD2", "tail" : ": Position", "member" : "battleship.PlayerSpec.positionD2", "link" : "battleship\/PlayerSpec.html#positionD2:battleship.Position", "kind" : "val"}, {"label" : "positionD1", "tail" : ": Position", "member" : "battleship.PlayerSpec.positionD1", "link" : "battleship\/PlayerSpec.html#positionD1:battleship.Position", "kind" : "val"}, {"label" : "ship", "tail" : ": Ship", "member" : "battleship.PlayerSpec.ship", "link" : "battleship\/PlayerSpec.html#ship:battleship.Ship", "kind" : "val"}, {"label" : "positionList", "tail" : ": List[Position]", "member" : "battleship.PlayerSpec.positionList", "link" : "battleship\/PlayerSpec.html#positionList:List[battleship.Position]", "kind" : "val"}, {"label" : "position4", "tail" : ": Position", "member" : "battleship.PlayerSpec.position4", "link" : "battleship\/PlayerSpec.html#position4:battleship.Position", "kind" : "val"}, {"label" : "position3", "tail" : ": Position", "member" : "battleship.PlayerSpec.position3", "link" : "battleship\/PlayerSpec.html#position3:battleship.Position", "kind" : "val"}, {"label" : "position2", "tail" : ": Position", "member" : "battleship.PlayerSpec.position2", "link" : "battleship\/PlayerSpec.html#position2:battleship.Position", "kind" : "val"}, {"label" : "position1", "tail" : ": Position", "member" : "battleship.PlayerSpec.position1", "link" : "battleship\/PlayerSpec.html#position1:battleship.Position", "kind" : "val"}, {"member" : "battleship.PlayerSpec#<init>", "error" : "unsupported entity"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.Matchers.of", "link" : "battleship\/PlayerSpec.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.Matchers.convertToRegexWrapper", "link" : "battleship\/PlayerSpec.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: org.scalactic.source.Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.Matchers.convertToStringShouldWrapper", "link" : "battleship\/PlayerSpec.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: org.scalactic.source.Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.Matchers.convertToAnyShouldWrapper", "link" : "battleship\/PlayerSpec.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: org.scalactic.source.Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.Matchers.the", "link" : "battleship\/PlayerSpec.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/PlayerSpec.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/PlayerSpec.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/PlayerSpec.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/PlayerSpec.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/PlayerSpec.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/PlayerSpec.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/PlayerSpec.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/PlayerSpec.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/PlayerSpec.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/PlayerSpec.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/PlayerSpec.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/PlayerSpec.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/PlayerSpec.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/PlayerSpec.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/PlayerSpec.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/PlayerSpec.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/PlayerSpec.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/PlayerSpec.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/PlayerSpec.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/PlayerSpec.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/PlayerSpec.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/PlayerSpec.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/PlayerSpec.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.Matchers.message", "link" : "battleship\/PlayerSpec.html#message(expectedMessage:String):org.scalatest.words.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: ⇒ Any): ResultOfThrownByApplication", "member" : "org.scalatest.Matchers.thrownBy", "link" : "battleship\/PlayerSpec.html#thrownBy(fun:=>Any):org.scalatest.words.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.Matchers.atMostOneElementOf", "link" : "battleship\/PlayerSpec.html#atMostOneElementOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.Matchers.atMostOneOf", "link" : "battleship\/PlayerSpec.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.Matchers.inOrderElementsOf", "link" : "battleship\/PlayerSpec.html#inOrderElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderApplication", "member" : "org.scalatest.Matchers.inOrder", "link" : "battleship\/PlayerSpec.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.Matchers.allElementsOf", "link" : "battleship\/PlayerSpec.html#allElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAllOfApplication", "member" : "org.scalatest.Matchers.allOf", "link" : "battleship\/PlayerSpec.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.Matchers.inOrderOnly", "link" : "battleship\/PlayerSpec.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: org.scalactic.source.Position): ResultOfOnlyApplication", "member" : "org.scalatest.Matchers.only", "link" : "battleship\/PlayerSpec.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.Matchers.theSameElementsInOrderAs", "link" : "battleship\/PlayerSpec.html#theSameElementsInOrderAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.Matchers.theSameElementsAs", "link" : "battleship\/PlayerSpec.html#theSameElementsAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.Matchers.noElementsOf", "link" : "battleship\/PlayerSpec.html#noElementsOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfNoneOfApplication", "member" : "org.scalatest.Matchers.noneOf", "link" : "battleship\/PlayerSpec.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.Matchers.atLeastOneElementOf", "link" : "battleship\/PlayerSpec.html#atLeastOneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.Matchers.atLeastOneOf", "link" : "battleship\/PlayerSpec.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.Matchers.oneElementOf", "link" : "battleship\/PlayerSpec.html#oneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfOneOfApplication", "member" : "org.scalatest.Matchers.oneOf", "link" : "battleship\/PlayerSpec.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.Matchers.definedAt", "link" : "battleship\/PlayerSpec.html#definedAt[T](right:T):org.scalatest.words.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.>=", "link" : "battleship\/PlayerSpec.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.words.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.<=", "link" : "battleship\/PlayerSpec.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.words.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.Matchers.>", "link" : "battleship\/PlayerSpec.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.words.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.Matchers.<", "link" : "battleship\/PlayerSpec.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.words.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.Matchers.regex", "link" : "battleship\/PlayerSpec.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.Matchers.theSameInstanceAs", "link" : "battleship\/PlayerSpec.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/PlayerSpec.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/PlayerSpec.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.Matchers.value", "link" : "battleship\/PlayerSpec.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.Matchers.key", "link" : "battleship\/PlayerSpec.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/PlayerSpec.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/PlayerSpec.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: org.scalactic.source.Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "battleship\/PlayerSpec.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "battleship\/PlayerSpec.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "battleship\/PlayerSpec.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "battleship\/PlayerSpec.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.words.MatcherWords.equal", "link" : "battleship\/PlayerSpec.html#equal(right:Any):org.scalatest.matchers.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.words.MatcherWords.matchPattern", "link" : "battleship\/PlayerSpec.html#matchPattern:org.scalatest.words.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.words.MatcherWords.typeCheck", "link" : "battleship\/PlayerSpec.html#typeCheck:org.scalatest.words.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.words.MatcherWords.compile", "link" : "battleship\/PlayerSpec.html#compile:org.scalatest.words.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.words.MatcherWords.empty", "link" : "battleship\/PlayerSpec.html#empty:org.scalatest.words.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.words.MatcherWords.writable", "link" : "battleship\/PlayerSpec.html#writable:org.scalatest.words.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.words.MatcherWords.readable", "link" : "battleship\/PlayerSpec.html#readable:org.scalatest.words.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.words.MatcherWords.exist", "link" : "battleship\/PlayerSpec.html#exist:org.scalatest.words.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: org.scalactic.source.Position): NoExceptionWord", "member" : "org.scalatest.words.MatcherWords.noException", "link" : "battleship\/PlayerSpec.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.words.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.words.MatcherWords.defined", "link" : "battleship\/PlayerSpec.html#defined:org.scalatest.words.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.words.MatcherWords.sorted", "link" : "battleship\/PlayerSpec.html#sorted:org.scalatest.words.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.words.MatcherWords.size", "link" : "battleship\/PlayerSpec.html#size:org.scalatest.words.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.words.MatcherWords.length", "link" : "battleship\/PlayerSpec.html#length:org.scalatest.words.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.words.MatcherWords.not", "link" : "battleship\/PlayerSpec.html#not:org.scalatest.words.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.words.MatcherWords.contain", "link" : "battleship\/PlayerSpec.html#contain:org.scalatest.words.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.words.MatcherWords.be", "link" : "battleship\/PlayerSpec.html#be:org.scalatest.words.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.words.MatcherWords.have", "link" : "battleship\/PlayerSpec.html#have:org.scalatest.words.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.words.MatcherWords.include", "link" : "battleship\/PlayerSpec.html#include:org.scalatest.words.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.words.MatcherWords.endWith", "link" : "battleship\/PlayerSpec.html#endWith:org.scalatest.words.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.words.MatcherWords.startWith", "link" : "battleship\/PlayerSpec.html#startWith:org.scalatest.words.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.words.MatcherWords.fullyMatch", "link" : "battleship\/PlayerSpec.html#fullyMatch:org.scalatest.words.FullyMatchWord", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "battleship\/PlayerSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "battleship\/PlayerSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "battleship\/PlayerSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "battleship\/PlayerSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "battleship\/PlayerSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "battleship\/PlayerSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "battleship\/PlayerSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "battleship\/PlayerSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "battleship\/PlayerSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "battleship\/PlayerSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "battleship\/PlayerSpec.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "battleship\/PlayerSpec.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/PlayerSpec.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "battleship\/PlayerSpec.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "battleship\/PlayerSpec.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "battleship\/PlayerSpec.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "battleship\/PlayerSpec.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "battleship\/PlayerSpec.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "battleship\/PlayerSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "battleship\/PlayerSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "battleship\/PlayerSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "battleship\/PlayerSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "battleship\/PlayerSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "battleship\/PlayerSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: org.scalactic.source.Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "battleship\/PlayerSpec.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "battleship\/PlayerSpec.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "battleship\/PlayerSpec.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "battleship\/PlayerSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "battleship\/PlayerSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "battleship\/PlayerSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "battleship\/PlayerSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "battleship\/PlayerSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "battleship\/PlayerSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/PlayerSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/PlayerSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "battleship\/PlayerSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "battleship\/PlayerSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: org.scalactic.source.Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "battleship\/PlayerSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "battleship\/PlayerSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "battleship\/PlayerSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PlayerSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PlayerSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PlayerSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PlayerSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PlayerSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PlayerSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PlayerSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PlayerSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/PlayerSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/PlayerSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "battleship\/PlayerSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "battleship\/PlayerSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "battleship\/PlayerSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "battleship\/PlayerSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "battleship\/PlayerSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "battleship\/PlayerSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/PlayerSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/PlayerSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/PlayerSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "battleship\/PlayerSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/PlayerSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "battleship\/PlayerSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "battleship\/PlayerSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "battleship\/PlayerSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "battleship\/PlayerSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "battleship\/PlayerSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "battleship\/PlayerSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "battleship\/PlayerSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "battleship\/PlayerSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "battleship\/PlayerSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "battleship\/PlayerSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "battleship\/PlayerSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/PlayerSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/PlayerSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/PlayerSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/PlayerSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/PlayerSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/PlayerSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "battleship\/PlayerSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/PlayerSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/PlayerSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/PlayerSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/PlayerSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/PlayerSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/PlayerSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/PlayerSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/PlayerSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/PlayerSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/PlayerSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/PlayerSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/PlayerSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/PlayerSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "battleship\/PlayerSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "battleship\/PlayerSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/PlayerSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/PlayerSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/PlayerSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "battleship\/PlayerSpec.html", "kind" : "class"}, {"name" : "battleship.Position", "shortDescription" : "Class position.", "members_case class" : [{"label" : "isInGrid", "tail" : "(): Boolean", "member" : "battleship.Position.isInGrid", "link" : "battleship\/Position.html#isInGrid:Boolean", "kind" : "def"}, {"member" : "battleship.Position#<init>", "error" : "unsupported entity"}, {"label" : "isTouched", "tail" : ": Boolean", "member" : "battleship.Position.isTouched", "link" : "battleship\/Position.html#isTouched:Boolean", "kind" : "val"}, {"label" : "axisY", "tail" : ": Int", "member" : "battleship.Position.axisY", "link" : "battleship\/Position.html#axisY:Int", "kind" : "val"}, {"label" : "axisX", "tail" : ": Int", "member" : "battleship.Position.axisX", "link" : "battleship\/Position.html#axisX:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/Position.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/Position.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/Position.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/Position.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/Position.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/Position.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/Position.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Position.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Position.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Position.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/Position.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/Position.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/Position.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/Position.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/Position.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/Position.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "battleship\/Position.html", "kind" : "case class"}, {"name" : "battleship.PositionSpec", "shortDescription" : "", "members_class" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.Matchers.RegexWrapper", "link" : "battleship\/PositionSpec.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.StringShouldWrapper", "link" : "battleship\/PositionSpec.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.AnyShouldWrapper", "link" : "battleship\/PositionSpec.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "battleship\/PositionSpec.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForCollectedString", "link" : "battleship\/PositionSpec.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForCollectedString", "link" : "battleship\/PositionSpec.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForCollectedString", "link" : "battleship\/PositionSpec.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "battleship\/PositionSpec.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfCollectedAny", "link" : "battleship\/PositionSpec.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedArray", "link" : "battleship\/PositionSpec.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedAny", "link" : "battleship\/PositionSpec.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfContainWordForCollectedAny", "link" : "battleship\/PositionSpec.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfNotWordForCollectedAny", "link" : "battleship\/PositionSpec.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForExtent", "link" : "battleship\/PositionSpec.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.Matchers.TheSameInstanceAsPhrase", "link" : "battleship\/PositionSpec.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.Matchers.AnWord", "link" : "battleship\/PositionSpec.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.Matchers.AWord", "link" : "battleship\/PositionSpec.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.Matchers.ValueWord", "link" : "battleship\/PositionSpec.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.Matchers.KeyWord", "link" : "battleship\/PositionSpec.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForString", "link" : "battleship\/PositionSpec.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForString", "link" : "battleship\/PositionSpec.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForString", "link" : "battleship\/PositionSpec.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForString", "link" : "battleship\/PositionSpec.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.Matchers.RegexWord", "link" : "battleship\/PositionSpec.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForAny", "link" : "battleship\/PositionSpec.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.Matchers.HavePropertyMatcherGenerator", "link" : "battleship\/PositionSpec.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "battleship\/PositionSpec.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "battleship\/PositionSpec.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "battleship\/PositionSpec.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "battleship\/PositionSpec.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "battleship\/PositionSpec.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "battleship\/PositionSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/PositionSpec.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "battleship\/PositionSpec.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "battleship\/PositionSpec.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "battleship\/PositionSpec.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "battleship\/PositionSpec.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "battleship\/PositionSpec.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "battleship\/PositionSpec.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "battleship\/PositionSpec.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "battleship\/PositionSpec.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "battleship\/PositionSpec.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "battleship\/PositionSpec.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "battleship\/PositionSpec.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "battleship\/PositionSpec.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "battleship\/PositionSpec.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "battleship\/PositionSpec.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "battleship\/PositionSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "battleship\/PositionSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "battleship\/PositionSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "battleship\/PositionSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "position3", "tail" : ": Position", "member" : "battleship.PositionSpec.position3", "link" : "battleship\/PositionSpec.html#position3:battleship.Position", "kind" : "val"}, {"label" : "position2", "tail" : ": Position", "member" : "battleship.PositionSpec.position2", "link" : "battleship\/PositionSpec.html#position2:battleship.Position", "kind" : "val"}, {"label" : "position1", "tail" : ": Position", "member" : "battleship.PositionSpec.position1", "link" : "battleship\/PositionSpec.html#position1:battleship.Position", "kind" : "val"}, {"member" : "battleship.PositionSpec#<init>", "error" : "unsupported entity"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.Matchers.of", "link" : "battleship\/PositionSpec.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.Matchers.convertToRegexWrapper", "link" : "battleship\/PositionSpec.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: org.scalactic.source.Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.Matchers.convertToStringShouldWrapper", "link" : "battleship\/PositionSpec.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: org.scalactic.source.Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.Matchers.convertToAnyShouldWrapper", "link" : "battleship\/PositionSpec.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: org.scalactic.source.Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.Matchers.the", "link" : "battleship\/PositionSpec.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/PositionSpec.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/PositionSpec.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/PositionSpec.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/PositionSpec.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/PositionSpec.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/PositionSpec.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/PositionSpec.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/PositionSpec.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/PositionSpec.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/PositionSpec.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/PositionSpec.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/PositionSpec.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/PositionSpec.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/PositionSpec.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/PositionSpec.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/PositionSpec.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/PositionSpec.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/PositionSpec.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/PositionSpec.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/PositionSpec.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/PositionSpec.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/PositionSpec.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/PositionSpec.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.Matchers.message", "link" : "battleship\/PositionSpec.html#message(expectedMessage:String):org.scalatest.words.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: ⇒ Any): ResultOfThrownByApplication", "member" : "org.scalatest.Matchers.thrownBy", "link" : "battleship\/PositionSpec.html#thrownBy(fun:=>Any):org.scalatest.words.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.Matchers.atMostOneElementOf", "link" : "battleship\/PositionSpec.html#atMostOneElementOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.Matchers.atMostOneOf", "link" : "battleship\/PositionSpec.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.Matchers.inOrderElementsOf", "link" : "battleship\/PositionSpec.html#inOrderElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderApplication", "member" : "org.scalatest.Matchers.inOrder", "link" : "battleship\/PositionSpec.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.Matchers.allElementsOf", "link" : "battleship\/PositionSpec.html#allElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAllOfApplication", "member" : "org.scalatest.Matchers.allOf", "link" : "battleship\/PositionSpec.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.Matchers.inOrderOnly", "link" : "battleship\/PositionSpec.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: org.scalactic.source.Position): ResultOfOnlyApplication", "member" : "org.scalatest.Matchers.only", "link" : "battleship\/PositionSpec.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.Matchers.theSameElementsInOrderAs", "link" : "battleship\/PositionSpec.html#theSameElementsInOrderAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.Matchers.theSameElementsAs", "link" : "battleship\/PositionSpec.html#theSameElementsAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.Matchers.noElementsOf", "link" : "battleship\/PositionSpec.html#noElementsOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfNoneOfApplication", "member" : "org.scalatest.Matchers.noneOf", "link" : "battleship\/PositionSpec.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.Matchers.atLeastOneElementOf", "link" : "battleship\/PositionSpec.html#atLeastOneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.Matchers.atLeastOneOf", "link" : "battleship\/PositionSpec.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.Matchers.oneElementOf", "link" : "battleship\/PositionSpec.html#oneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfOneOfApplication", "member" : "org.scalatest.Matchers.oneOf", "link" : "battleship\/PositionSpec.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.Matchers.definedAt", "link" : "battleship\/PositionSpec.html#definedAt[T](right:T):org.scalatest.words.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.>=", "link" : "battleship\/PositionSpec.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.words.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.<=", "link" : "battleship\/PositionSpec.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.words.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.Matchers.>", "link" : "battleship\/PositionSpec.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.words.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.Matchers.<", "link" : "battleship\/PositionSpec.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.words.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.Matchers.regex", "link" : "battleship\/PositionSpec.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.Matchers.theSameInstanceAs", "link" : "battleship\/PositionSpec.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/PositionSpec.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/PositionSpec.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.Matchers.value", "link" : "battleship\/PositionSpec.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.Matchers.key", "link" : "battleship\/PositionSpec.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/PositionSpec.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/PositionSpec.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: org.scalactic.source.Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "battleship\/PositionSpec.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "battleship\/PositionSpec.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "battleship\/PositionSpec.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "battleship\/PositionSpec.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.words.MatcherWords.equal", "link" : "battleship\/PositionSpec.html#equal(right:Any):org.scalatest.matchers.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.words.MatcherWords.matchPattern", "link" : "battleship\/PositionSpec.html#matchPattern:org.scalatest.words.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.words.MatcherWords.typeCheck", "link" : "battleship\/PositionSpec.html#typeCheck:org.scalatest.words.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.words.MatcherWords.compile", "link" : "battleship\/PositionSpec.html#compile:org.scalatest.words.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.words.MatcherWords.empty", "link" : "battleship\/PositionSpec.html#empty:org.scalatest.words.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.words.MatcherWords.writable", "link" : "battleship\/PositionSpec.html#writable:org.scalatest.words.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.words.MatcherWords.readable", "link" : "battleship\/PositionSpec.html#readable:org.scalatest.words.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.words.MatcherWords.exist", "link" : "battleship\/PositionSpec.html#exist:org.scalatest.words.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: org.scalactic.source.Position): NoExceptionWord", "member" : "org.scalatest.words.MatcherWords.noException", "link" : "battleship\/PositionSpec.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.words.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.words.MatcherWords.defined", "link" : "battleship\/PositionSpec.html#defined:org.scalatest.words.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.words.MatcherWords.sorted", "link" : "battleship\/PositionSpec.html#sorted:org.scalatest.words.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.words.MatcherWords.size", "link" : "battleship\/PositionSpec.html#size:org.scalatest.words.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.words.MatcherWords.length", "link" : "battleship\/PositionSpec.html#length:org.scalatest.words.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.words.MatcherWords.not", "link" : "battleship\/PositionSpec.html#not:org.scalatest.words.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.words.MatcherWords.contain", "link" : "battleship\/PositionSpec.html#contain:org.scalatest.words.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.words.MatcherWords.be", "link" : "battleship\/PositionSpec.html#be:org.scalatest.words.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.words.MatcherWords.have", "link" : "battleship\/PositionSpec.html#have:org.scalatest.words.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.words.MatcherWords.include", "link" : "battleship\/PositionSpec.html#include:org.scalatest.words.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.words.MatcherWords.endWith", "link" : "battleship\/PositionSpec.html#endWith:org.scalatest.words.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.words.MatcherWords.startWith", "link" : "battleship\/PositionSpec.html#startWith:org.scalatest.words.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.words.MatcherWords.fullyMatch", "link" : "battleship\/PositionSpec.html#fullyMatch:org.scalatest.words.FullyMatchWord", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "battleship\/PositionSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "battleship\/PositionSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "battleship\/PositionSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "battleship\/PositionSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "battleship\/PositionSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "battleship\/PositionSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "battleship\/PositionSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "battleship\/PositionSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "battleship\/PositionSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "battleship\/PositionSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "battleship\/PositionSpec.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "battleship\/PositionSpec.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/PositionSpec.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "battleship\/PositionSpec.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "battleship\/PositionSpec.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "battleship\/PositionSpec.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "battleship\/PositionSpec.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "battleship\/PositionSpec.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "battleship\/PositionSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "battleship\/PositionSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "battleship\/PositionSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "battleship\/PositionSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "battleship\/PositionSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "battleship\/PositionSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: org.scalactic.source.Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "battleship\/PositionSpec.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "battleship\/PositionSpec.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "battleship\/PositionSpec.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "battleship\/PositionSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "battleship\/PositionSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "battleship\/PositionSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "battleship\/PositionSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "battleship\/PositionSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "battleship\/PositionSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/PositionSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/PositionSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "battleship\/PositionSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "battleship\/PositionSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: org.scalactic.source.Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "battleship\/PositionSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "battleship\/PositionSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "battleship\/PositionSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PositionSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PositionSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PositionSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/PositionSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PositionSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PositionSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PositionSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/PositionSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/PositionSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/PositionSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "battleship\/PositionSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "battleship\/PositionSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "battleship\/PositionSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "battleship\/PositionSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "battleship\/PositionSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "battleship\/PositionSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/PositionSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/PositionSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/PositionSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "battleship\/PositionSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/PositionSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "battleship\/PositionSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "battleship\/PositionSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "battleship\/PositionSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "battleship\/PositionSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "battleship\/PositionSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "battleship\/PositionSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "battleship\/PositionSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "battleship\/PositionSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "battleship\/PositionSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "battleship\/PositionSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "battleship\/PositionSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/PositionSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/PositionSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/PositionSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/PositionSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/PositionSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/PositionSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "battleship\/PositionSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/PositionSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/PositionSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/PositionSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/PositionSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/PositionSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/PositionSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/PositionSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/PositionSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/PositionSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/PositionSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/PositionSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/PositionSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/PositionSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "battleship\/PositionSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "battleship\/PositionSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/PositionSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/PositionSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/PositionSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "battleship\/PositionSpec.html", "kind" : "class"}, {"name" : "battleship.Ship", "shortDescription" : "Class Ship", "members_case class" : [{"label" : "destroyPosition", "tail" : "(position: Position): Option[Ship]", "member" : "battleship.Ship.destroyPosition", "link" : "battleship\/Ship.html#destroyPosition(position:battleship.Position):Option[battleship.Ship]", "kind" : "def"}, {"label" : "checkPositionMatch", "tail" : "(position: Position): Option[Boolean]", "member" : "battleship.Ship.checkPositionMatch", "link" : "battleship\/Ship.html#checkPositionMatch(position:battleship.Position):Option[Boolean]", "kind" : "def"}, {"member" : "battleship.Ship#<init>", "error" : "unsupported entity"}, {"label" : "positionList", "tail" : ": List[Position]", "member" : "battleship.Ship.positionList", "link" : "battleship\/Ship.html#positionList:List[battleship.Position]", "kind" : "val"}, {"label" : "isSunk", "tail" : ": Boolean", "member" : "battleship.Ship.isSunk", "link" : "battleship\/Ship.html#isSunk:Boolean", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "battleship.Ship.size", "link" : "battleship\/Ship.html#size:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "battleship.Ship.name", "link" : "battleship\/Ship.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/Ship.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/Ship.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/Ship.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/Ship.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/Ship.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/Ship.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/Ship.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Ship.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Ship.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/Ship.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/Ship.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/Ship.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/Ship.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/Ship.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/Ship.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/Ship.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "battleship\/Ship.html", "kind" : "case class"}, {"name" : "battleship.ShipSpec", "shortDescription" : "", "members_class" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.Matchers.RegexWrapper", "link" : "battleship\/ShipSpec.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.StringShouldWrapper", "link" : "battleship\/ShipSpec.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.AnyShouldWrapper", "link" : "battleship\/ShipSpec.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "battleship\/ShipSpec.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForCollectedString", "link" : "battleship\/ShipSpec.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForCollectedString", "link" : "battleship\/ShipSpec.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForCollectedString", "link" : "battleship\/ShipSpec.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "battleship\/ShipSpec.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfCollectedAny", "link" : "battleship\/ShipSpec.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedArray", "link" : "battleship\/ShipSpec.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedAny", "link" : "battleship\/ShipSpec.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfContainWordForCollectedAny", "link" : "battleship\/ShipSpec.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfNotWordForCollectedAny", "link" : "battleship\/ShipSpec.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForExtent", "link" : "battleship\/ShipSpec.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.Matchers.TheSameInstanceAsPhrase", "link" : "battleship\/ShipSpec.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.Matchers.AnWord", "link" : "battleship\/ShipSpec.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.Matchers.AWord", "link" : "battleship\/ShipSpec.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.Matchers.ValueWord", "link" : "battleship\/ShipSpec.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.Matchers.KeyWord", "link" : "battleship\/ShipSpec.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForString", "link" : "battleship\/ShipSpec.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForString", "link" : "battleship\/ShipSpec.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForString", "link" : "battleship\/ShipSpec.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForString", "link" : "battleship\/ShipSpec.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.Matchers.RegexWord", "link" : "battleship\/ShipSpec.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForAny", "link" : "battleship\/ShipSpec.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.Matchers.HavePropertyMatcherGenerator", "link" : "battleship\/ShipSpec.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "battleship\/ShipSpec.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "battleship\/ShipSpec.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "battleship\/ShipSpec.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "battleship\/ShipSpec.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "battleship\/ShipSpec.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "battleship\/ShipSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/ShipSpec.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "battleship\/ShipSpec.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "battleship\/ShipSpec.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "battleship\/ShipSpec.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "battleship\/ShipSpec.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "battleship\/ShipSpec.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "battleship\/ShipSpec.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "battleship\/ShipSpec.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "battleship\/ShipSpec.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "battleship\/ShipSpec.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "battleship\/ShipSpec.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "battleship\/ShipSpec.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "battleship\/ShipSpec.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "battleship\/ShipSpec.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "battleship\/ShipSpec.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "battleship\/ShipSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "battleship\/ShipSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "battleship\/ShipSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "battleship\/ShipSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "shipD", "tail" : ": Ship", "member" : "battleship.ShipSpec.shipD", "link" : "battleship\/ShipSpec.html#shipD:battleship.Ship", "kind" : "val"}, {"label" : "positionDList", "tail" : ": List[Position]", "member" : "battleship.ShipSpec.positionDList", "link" : "battleship\/ShipSpec.html#positionDList:List[battleship.Position]", "kind" : "val"}, {"label" : "positionD5", "tail" : ": Position", "member" : "battleship.ShipSpec.positionD5", "link" : "battleship\/ShipSpec.html#positionD5:battleship.Position", "kind" : "val"}, {"label" : "positionD4", "tail" : ": Position", "member" : "battleship.ShipSpec.positionD4", "link" : "battleship\/ShipSpec.html#positionD4:battleship.Position", "kind" : "val"}, {"label" : "positionD3", "tail" : ": Position", "member" : "battleship.ShipSpec.positionD3", "link" : "battleship\/ShipSpec.html#positionD3:battleship.Position", "kind" : "val"}, {"label" : "positionD2", "tail" : ": Position", "member" : "battleship.ShipSpec.positionD2", "link" : "battleship\/ShipSpec.html#positionD2:battleship.Position", "kind" : "val"}, {"label" : "positionD1", "tail" : ": Position", "member" : "battleship.ShipSpec.positionD1", "link" : "battleship\/ShipSpec.html#positionD1:battleship.Position", "kind" : "val"}, {"label" : "shipDestroy", "tail" : ": Ship", "member" : "battleship.ShipSpec.shipDestroy", "link" : "battleship\/ShipSpec.html#shipDestroy:battleship.Ship", "kind" : "val"}, {"label" : "newListWithDestroyPosition", "tail" : ": List[Position]", "member" : "battleship.ShipSpec.newListWithDestroyPosition", "link" : "battleship\/ShipSpec.html#newListWithDestroyPosition:List[battleship.Position]", "kind" : "val"}, {"label" : "ship", "tail" : ": Ship", "member" : "battleship.ShipSpec.ship", "link" : "battleship\/ShipSpec.html#ship:battleship.Ship", "kind" : "val"}, {"label" : "positionList", "tail" : ": List[Position]", "member" : "battleship.ShipSpec.positionList", "link" : "battleship\/ShipSpec.html#positionList:List[battleship.Position]", "kind" : "val"}, {"label" : "position5", "tail" : ": Position", "member" : "battleship.ShipSpec.position5", "link" : "battleship\/ShipSpec.html#position5:battleship.Position", "kind" : "val"}, {"label" : "position4", "tail" : ": Position", "member" : "battleship.ShipSpec.position4", "link" : "battleship\/ShipSpec.html#position4:battleship.Position", "kind" : "val"}, {"label" : "position3", "tail" : ": Position", "member" : "battleship.ShipSpec.position3", "link" : "battleship\/ShipSpec.html#position3:battleship.Position", "kind" : "val"}, {"label" : "position2", "tail" : ": Position", "member" : "battleship.ShipSpec.position2", "link" : "battleship\/ShipSpec.html#position2:battleship.Position", "kind" : "val"}, {"label" : "position1", "tail" : ": Position", "member" : "battleship.ShipSpec.position1", "link" : "battleship\/ShipSpec.html#position1:battleship.Position", "kind" : "val"}, {"member" : "battleship.ShipSpec#<init>", "error" : "unsupported entity"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.Matchers.of", "link" : "battleship\/ShipSpec.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.Matchers.convertToRegexWrapper", "link" : "battleship\/ShipSpec.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: org.scalactic.source.Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.Matchers.convertToStringShouldWrapper", "link" : "battleship\/ShipSpec.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: org.scalactic.source.Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.Matchers.convertToAnyShouldWrapper", "link" : "battleship\/ShipSpec.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: org.scalactic.source.Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.Matchers.the", "link" : "battleship\/ShipSpec.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/ShipSpec.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/ShipSpec.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/ShipSpec.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/ShipSpec.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atMost", "link" : "battleship\/ShipSpec.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/ShipSpec.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/ShipSpec.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.between", "link" : "battleship\/ShipSpec.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/ShipSpec.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/ShipSpec.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.no", "link" : "battleship\/ShipSpec.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/ShipSpec.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/ShipSpec.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.exactly", "link" : "battleship\/ShipSpec.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/ShipSpec.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/ShipSpec.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.every", "link" : "battleship\/ShipSpec.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/ShipSpec.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/ShipSpec.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atLeast", "link" : "battleship\/ShipSpec.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/ShipSpec.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/ShipSpec.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: org.scalactic.source.Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.all", "link" : "battleship\/ShipSpec.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.Matchers.message", "link" : "battleship\/ShipSpec.html#message(expectedMessage:String):org.scalatest.words.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: ⇒ Any): ResultOfThrownByApplication", "member" : "org.scalatest.Matchers.thrownBy", "link" : "battleship\/ShipSpec.html#thrownBy(fun:=>Any):org.scalatest.words.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.Matchers.atMostOneElementOf", "link" : "battleship\/ShipSpec.html#atMostOneElementOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.Matchers.atMostOneOf", "link" : "battleship\/ShipSpec.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.Matchers.inOrderElementsOf", "link" : "battleship\/ShipSpec.html#inOrderElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderApplication", "member" : "org.scalatest.Matchers.inOrder", "link" : "battleship\/ShipSpec.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.Matchers.allElementsOf", "link" : "battleship\/ShipSpec.html#allElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAllOfApplication", "member" : "org.scalatest.Matchers.allOf", "link" : "battleship\/ShipSpec.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.Matchers.inOrderOnly", "link" : "battleship\/ShipSpec.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: org.scalactic.source.Position): ResultOfOnlyApplication", "member" : "org.scalatest.Matchers.only", "link" : "battleship\/ShipSpec.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.Matchers.theSameElementsInOrderAs", "link" : "battleship\/ShipSpec.html#theSameElementsInOrderAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.Matchers.theSameElementsAs", "link" : "battleship\/ShipSpec.html#theSameElementsAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.Matchers.noElementsOf", "link" : "battleship\/ShipSpec.html#noElementsOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfNoneOfApplication", "member" : "org.scalatest.Matchers.noneOf", "link" : "battleship\/ShipSpec.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.Matchers.atLeastOneElementOf", "link" : "battleship\/ShipSpec.html#atLeastOneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.Matchers.atLeastOneOf", "link" : "battleship\/ShipSpec.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.Matchers.oneElementOf", "link" : "battleship\/ShipSpec.html#oneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: org.scalactic.source.Position): ResultOfOneOfApplication", "member" : "org.scalatest.Matchers.oneOf", "link" : "battleship\/ShipSpec.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.Matchers.definedAt", "link" : "battleship\/ShipSpec.html#definedAt[T](right:T):org.scalatest.words.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.>=", "link" : "battleship\/ShipSpec.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.words.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.<=", "link" : "battleship\/ShipSpec.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.words.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.Matchers.>", "link" : "battleship\/ShipSpec.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.words.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.Matchers.<", "link" : "battleship\/ShipSpec.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.words.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.Matchers.regex", "link" : "battleship\/ShipSpec.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.Matchers.theSameInstanceAs", "link" : "battleship\/ShipSpec.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.Matchers.an", "link" : "battleship\/ShipSpec.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.Matchers.a", "link" : "battleship\/ShipSpec.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.Matchers.value", "link" : "battleship\/ShipSpec.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.Matchers.key", "link" : "battleship\/ShipSpec.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/ShipSpec.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.Matchers.equal", "link" : "battleship\/ShipSpec.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: org.scalactic.source.Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "battleship\/ShipSpec.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "battleship\/ShipSpec.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "battleship\/ShipSpec.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "battleship\/ShipSpec.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.words.MatcherWords.equal", "link" : "battleship\/ShipSpec.html#equal(right:Any):org.scalatest.matchers.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.words.MatcherWords.matchPattern", "link" : "battleship\/ShipSpec.html#matchPattern:org.scalatest.words.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.words.MatcherWords.typeCheck", "link" : "battleship\/ShipSpec.html#typeCheck:org.scalatest.words.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.words.MatcherWords.compile", "link" : "battleship\/ShipSpec.html#compile:org.scalatest.words.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.words.MatcherWords.empty", "link" : "battleship\/ShipSpec.html#empty:org.scalatest.words.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.words.MatcherWords.writable", "link" : "battleship\/ShipSpec.html#writable:org.scalatest.words.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.words.MatcherWords.readable", "link" : "battleship\/ShipSpec.html#readable:org.scalatest.words.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.words.MatcherWords.exist", "link" : "battleship\/ShipSpec.html#exist:org.scalatest.words.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: org.scalactic.source.Position): NoExceptionWord", "member" : "org.scalatest.words.MatcherWords.noException", "link" : "battleship\/ShipSpec.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.words.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.words.MatcherWords.defined", "link" : "battleship\/ShipSpec.html#defined:org.scalatest.words.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.words.MatcherWords.sorted", "link" : "battleship\/ShipSpec.html#sorted:org.scalatest.words.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.words.MatcherWords.size", "link" : "battleship\/ShipSpec.html#size:org.scalatest.words.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.words.MatcherWords.length", "link" : "battleship\/ShipSpec.html#length:org.scalatest.words.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.words.MatcherWords.not", "link" : "battleship\/ShipSpec.html#not:org.scalatest.words.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.words.MatcherWords.contain", "link" : "battleship\/ShipSpec.html#contain:org.scalatest.words.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.words.MatcherWords.be", "link" : "battleship\/ShipSpec.html#be:org.scalatest.words.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.words.MatcherWords.have", "link" : "battleship\/ShipSpec.html#have:org.scalatest.words.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.words.MatcherWords.include", "link" : "battleship\/ShipSpec.html#include:org.scalatest.words.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.words.MatcherWords.endWith", "link" : "battleship\/ShipSpec.html#endWith:org.scalatest.words.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.words.MatcherWords.startWith", "link" : "battleship\/ShipSpec.html#startWith:org.scalatest.words.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.words.MatcherWords.fullyMatch", "link" : "battleship\/ShipSpec.html#fullyMatch:org.scalatest.words.FullyMatchWord", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "battleship\/ShipSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "battleship\/ShipSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "battleship\/ShipSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "battleship\/ShipSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "battleship\/ShipSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "battleship\/ShipSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "battleship\/ShipSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "battleship\/ShipSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "battleship\/ShipSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "battleship\/ShipSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "battleship\/ShipSpec.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "battleship\/ShipSpec.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "battleship\/ShipSpec.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "battleship\/ShipSpec.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "battleship\/ShipSpec.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "battleship\/ShipSpec.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "battleship\/ShipSpec.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "battleship\/ShipSpec.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "battleship\/ShipSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: org.scalactic.source.Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "battleship\/ShipSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "battleship\/ShipSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "battleship\/ShipSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "battleship\/ShipSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "battleship\/ShipSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: org.scalactic.source.Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "battleship\/ShipSpec.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "battleship\/ShipSpec.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: org.scalactic.source.Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "battleship\/ShipSpec.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "battleship\/ShipSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "battleship\/ShipSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "battleship\/ShipSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "battleship\/ShipSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "battleship\/ShipSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "battleship\/ShipSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/ShipSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "battleship\/ShipSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "battleship\/ShipSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "battleship\/ShipSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: org.scalactic.source.Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "battleship\/ShipSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "battleship\/ShipSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "battleship\/ShipSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/ShipSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/ShipSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/ShipSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "battleship\/ShipSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/ShipSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/ShipSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/ShipSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: org.scalactic.source.Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "battleship\/ShipSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/ShipSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "battleship\/ShipSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "battleship\/ShipSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "battleship\/ShipSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: org.scalactic.source.Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "battleship\/ShipSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "battleship\/ShipSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "battleship\/ShipSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "battleship\/ShipSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/ShipSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "battleship\/ShipSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/ShipSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "battleship\/ShipSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: org.scalactic.source.Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "battleship\/ShipSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "battleship\/ShipSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "battleship\/ShipSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "battleship\/ShipSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "battleship\/ShipSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "battleship\/ShipSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "battleship\/ShipSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "battleship\/ShipSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "battleship\/ShipSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "battleship\/ShipSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "battleship\/ShipSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "battleship\/ShipSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/ShipSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/ShipSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/ShipSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/ShipSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "battleship\/ShipSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "battleship\/ShipSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "battleship\/ShipSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "battleship\/ShipSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "battleship\/ShipSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "battleship\/ShipSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "battleship\/ShipSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "battleship\/ShipSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "battleship\/ShipSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "battleship\/ShipSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/ShipSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/ShipSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "battleship\/ShipSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "battleship\/ShipSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "battleship\/ShipSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "battleship\/ShipSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "battleship\/ShipSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "battleship\/ShipSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "battleship\/ShipSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "battleship\/ShipSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "battleship\/ShipSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "battleship\/ShipSpec.html", "kind" : "class"}], "sbt" : []};